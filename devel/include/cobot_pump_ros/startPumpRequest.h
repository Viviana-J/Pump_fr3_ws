// Generated by gencpp from file cobot_pump_ros/startPumpRequest.msg
// DO NOT EDIT!


#ifndef COBOT_PUMP_ROS_MESSAGE_STARTPUMPREQUEST_H
#define COBOT_PUMP_ROS_MESSAGE_STARTPUMPREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cobot_pump_ros
{
template <class ContainerAllocator>
struct startPumpRequest_
{
  typedef startPumpRequest_<ContainerAllocator> Type;

  startPumpRequest_()
    : pressure(0)
    , timeout_ms(0)  {
    }
  startPumpRequest_(const ContainerAllocator& _alloc)
    : pressure(0)
    , timeout_ms(0)  {
  (void)_alloc;
    }



   typedef int64_t _pressure_type;
  _pressure_type pressure;

   typedef int64_t _timeout_ms_type;
  _timeout_ms_type timeout_ms;





  typedef boost::shared_ptr< ::cobot_pump_ros::startPumpRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cobot_pump_ros::startPumpRequest_<ContainerAllocator> const> ConstPtr;

}; // struct startPumpRequest_

typedef ::cobot_pump_ros::startPumpRequest_<std::allocator<void> > startPumpRequest;

typedef boost::shared_ptr< ::cobot_pump_ros::startPumpRequest > startPumpRequestPtr;
typedef boost::shared_ptr< ::cobot_pump_ros::startPumpRequest const> startPumpRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cobot_pump_ros::startPumpRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cobot_pump_ros::startPumpRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cobot_pump_ros::startPumpRequest_<ContainerAllocator1> & lhs, const ::cobot_pump_ros::startPumpRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pressure == rhs.pressure &&
    lhs.timeout_ms == rhs.timeout_ms;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cobot_pump_ros::startPumpRequest_<ContainerAllocator1> & lhs, const ::cobot_pump_ros::startPumpRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cobot_pump_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cobot_pump_ros::startPumpRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cobot_pump_ros::startPumpRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cobot_pump_ros::startPumpRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cobot_pump_ros::startPumpRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cobot_pump_ros::startPumpRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cobot_pump_ros::startPumpRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cobot_pump_ros::startPumpRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f97f988ddf10dd11a71036788a3bd9fb";
  }

  static const char* value(const ::cobot_pump_ros::startPumpRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf97f988ddf10dd11ULL;
  static const uint64_t static_value2 = 0xa71036788a3bd9fbULL;
};

template<class ContainerAllocator>
struct DataType< ::cobot_pump_ros::startPumpRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cobot_pump_ros/startPumpRequest";
  }

  static const char* value(const ::cobot_pump_ros::startPumpRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cobot_pump_ros::startPumpRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 pressure\n"
"int64 timeout_ms\n"
;
  }

  static const char* value(const ::cobot_pump_ros::startPumpRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cobot_pump_ros::startPumpRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pressure);
      stream.next(m.timeout_ms);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct startPumpRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cobot_pump_ros::startPumpRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cobot_pump_ros::startPumpRequest_<ContainerAllocator>& v)
  {
    s << indent << "pressure: ";
    Printer<int64_t>::stream(s, indent + "  ", v.pressure);
    s << indent << "timeout_ms: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timeout_ms);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COBOT_PUMP_ROS_MESSAGE_STARTPUMPREQUEST_H
