// Generated by gencpp from file cobot_pump_ros/waypoint.msg
// DO NOT EDIT!


#ifndef COBOT_PUMP_ROS_MESSAGE_WAYPOINT_H
#define COBOT_PUMP_ROS_MESSAGE_WAYPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace cobot_pump_ros
{
template <class ContainerAllocator>
struct waypoint_
{
  typedef waypoint_<ContainerAllocator> Type;

  waypoint_()
    : pose()
    , franka_gripper(false)  {
    }
  waypoint_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , franka_gripper(false)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef uint8_t _franka_gripper_type;
  _franka_gripper_type franka_gripper;





  typedef boost::shared_ptr< ::cobot_pump_ros::waypoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cobot_pump_ros::waypoint_<ContainerAllocator> const> ConstPtr;

}; // struct waypoint_

typedef ::cobot_pump_ros::waypoint_<std::allocator<void> > waypoint;

typedef boost::shared_ptr< ::cobot_pump_ros::waypoint > waypointPtr;
typedef boost::shared_ptr< ::cobot_pump_ros::waypoint const> waypointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cobot_pump_ros::waypoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cobot_pump_ros::waypoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cobot_pump_ros::waypoint_<ContainerAllocator1> & lhs, const ::cobot_pump_ros::waypoint_<ContainerAllocator2> & rhs)
{
  return lhs.pose == rhs.pose &&
    lhs.franka_gripper == rhs.franka_gripper;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cobot_pump_ros::waypoint_<ContainerAllocator1> & lhs, const ::cobot_pump_ros::waypoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cobot_pump_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cobot_pump_ros::waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cobot_pump_ros::waypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cobot_pump_ros::waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cobot_pump_ros::waypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cobot_pump_ros::waypoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cobot_pump_ros::waypoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cobot_pump_ros::waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ed623046bb10ab60a0468b2d307eedb";
  }

  static const char* value(const ::cobot_pump_ros::waypoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ed623046bb10ab6ULL;
  static const uint64_t static_value2 = 0x0a0468b2d307eedbULL;
};

template<class ContainerAllocator>
struct DataType< ::cobot_pump_ros::waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cobot_pump_ros/waypoint";
  }

  static const char* value(const ::cobot_pump_ros::waypoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cobot_pump_ros::waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose pose\n"
"bool franka_gripper\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::cobot_pump_ros::waypoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cobot_pump_ros::waypoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.franka_gripper);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct waypoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cobot_pump_ros::waypoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cobot_pump_ros::waypoint_<ContainerAllocator>& v)
  {
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "franka_gripper: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.franka_gripper);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COBOT_PUMP_ROS_MESSAGE_WAYPOINT_H
